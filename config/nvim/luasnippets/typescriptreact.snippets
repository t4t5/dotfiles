snippet rct-component
	export default function ${1:ComponentName}() {
		return <div></div>
	}

snippet rct-component-with-children
	import { type ReactNode } from "react";

	export default function ${1:ComponentName}({ children, className }: { children: ReactNode, className?: string }) {
		return (
			<div className={className}>
				{children}
			</div>
		);
	}

snippet trpc-query
  const { data } = trpc.referral.getReferrals.useQuery()

snippet trpc-mutation
  const { mutate: saveEmail } =
    trpc.user.addEmail.useMutation({
      onSuccess: () => {},
    })

snippet rct-context-provider
	import { ReactNode, createContext, useContext } from "react";

	interface ${1:Provider}ContextType {
		thing: string;
	}

	const ${1:Provider}Context = createContext({} as ${1:Provider}ContextType);

	export function use${1:Provider}() {
		return useContext(${1:Provider}Context);
	}

	export function ${1:Provider}Provider({ children }: { children: ReactNode }) {
		const value = { thing: "hello!" };

		return (
			<${1:Provider}Context.Provider value={value}>{children}</${1:Provider}Context.Provider>
		);
	}
