snippet hardhat_config
import { task } from "hardhat/config"
import "@nomiclabs/hardhat-waffle"

// "npx hardhat accounts"
task("accounts", "Prints the list of accounts", async (_args, hre) => {
	const accounts = await hre.ethers.getSigners()

	for (const account of accounts) {
		console.log(account.address)
	}
})

export default {
	solidity: "0.8.4",
	paths: {
		artifacts: "./src/artifacts",
	},
}
endsnippet

snippet hardhat_test
import { ethers } from "hardhat"
import { expect } from "chai"

describe("MyContract", function () {
	it("should return the username", async function () {
		const MyContract = await ethers.getContractFactory("MyContract")
		const myContract = await MyContract.deploy("tristan")

		expect(await myContract.getName()).to.equal("tristan")
	})
})
endsnippet

snippet hardhat_script
import { ethers } from "hardhat"

async function main() {
  const MyContract = await ethers.getContractFactory("MyContract")
  const myContract = await MyContract.deploy("Hello, Hardhat!")

  await myContract.deployed()

  console.log("Greeter deployed to:", myContract.address)
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error)
    process.exit(1)
  })
endsnippet

snippet deploy_contract_with_args
import { ethers, waffle } from "hardhat"
import { expect } from "chai"

const { deployContract } = waffle
import ${1:MyContract} from "../src/artifacts/contracts/${1:MyContract}.sol/${1:MyContract}.json"

const accounts = await ethers.getSigners()

const ${2:myContract} = await deployContract(accounts[0], ${1:MyContract}, [
	${3:myArg},
])
endsnippet

snippet hardhat_test_revert_vmexception
await expect(
	shop.purchase(orderNumber, {
		value: ethers.utils.parseEther("1.0"),
	}),
).to.be.revertedWith("wrong amount of Dai sent!")
endsnippet

snippet apollo_server_nextjs
import { ApolloServer } from "apollo-server-micro"
import Cors from "micro-cors"
import {
  ApolloServerPluginLandingPageGraphQLPlayground,
  ApolloServerPluginLandingPageDisabled,
} from "apollo-server-core"
import type { NextApiHandler } from "next"
import type { IncomingMessage, ServerResponse } from "http"

import typeDefs from "../../gql/schemas"
import resolvers from "../../gql/resolvers"

const cors = Cors()

const server = new ApolloServer({
  typeDefs,
  resolvers,
  plugins: [
    process.env.NODE_ENV === "production"
      ? ApolloServerPluginLandingPageDisabled()
      : ApolloServerPluginLandingPageGraphQLPlayground(),
  ],
})

const startServer = server.start()

const handler: NextApiHandler = async (
  req: IncomingMessage,
  res: ServerResponse,
) => {
  if (req.method === "OPTIONS") return res.end()

  await startServer
  await server.createHandler({
    path: "/api/graphql",
  })(req, res)
}

export default cors(handler)

export const config = {
  api: {
    bodyParser: false,
  },
}
endsnippet

snippet apollo_client
import { ApolloClient, InMemoryCache } from "@apollo/client"

const client = new ApolloClient({
  uri: "http://localhost:3000/api/graphql",
  cache: new InMemoryCache(),
})

export default client
endsnippet
