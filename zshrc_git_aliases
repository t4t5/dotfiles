is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

fzf-down() {
  fzf --height 50% "$@" --border
}

g() {
  if [ "$1" = "ch" ]; then
    if [ -z "$2" ]; then
      g_fuzzy_checkout
    elif [ "$2" = "-b" ]; then
      git checkout -b "${@:3}" && git branch -u "origin/${@:3}"
    else
      git checkout "${@:2}"
    fi
  elif [ "$1" = "add" ]; then
    if [ -z "$2" ]; then
      g_fuzzy_add
    else
      git add "${@:2}"
    fi
  elif [ "$1" = "de" ]; then
    g_fuzzy_delete_branch
  elif [ "$1" = "br" ]; then
    g_fuzzy_branch
  elif [ "$1" = "fu" ] || [ "$1" = "fx" ]; then
    g_fuzzy_fixup
  elif [ "$1" = "rb" ]; then
    g_fuzzy_rebase
  elif [ "$1" = "glog" ] || [ "$1" = "glg" ]; then
    g_fuzzy_log
  elif [ "$1" = "gref" ] || [ "$1" = "rf" ]; then
    g_fuzzy_reflog
  elif [ "$1" = "st" ]; then
    g_fuzzy_stash
  elif [ "$1" = "am" ]; then
    git commit --amend --reset-author
  elif [ "$1" = "up" ]; then
    branch=$(git rev-parse --abbrev-ref HEAD)
    git branch --set-upstream-to=origin/$(echo "$branch") $(echo "$branch")
  elif [ "$1" = "rename" ]; then
    branch=$(git rev-parse --abbrev-ref HEAD)
    git branch -m $(echo "$branch") $(echo "$2")
  elif [ "$1" = "create" ]; then
    if [ -f "./package.json" ]; then
      project_name=$(node -p "require('./package.json').name")
    else
      project_name=$(basename "$PWD")
    fi
    echo -n "Desired github repo name [$project_name]: "
    read -r name
    name=${name:-$project_name}
    gh repo create "$name" --private --source=. --remote=upstream
  elif [ "$1" = "dnew" ]; then
    for next in $( git ls-files --others --exclude-standard ); do git --no-pager diff --no-index /dev/null $next; done;
  elif [ $# -gt 0 ]; then
    git "$@"
  else
    git status
  fi
}

g_fuzzy_add() {
  file=$(git status --porcelain | cut -c 4- | fzf-down)
  git add $(echo "$file")
}

g_fuzzy_checkout() {
  local branches branch
  branches=$(git branch -vv) &&
  branch=$(echo "$branches" | fzf +m) &&
  git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

g_fuzzy_delete_branch() {
  local branches branch
  branches=$(git branch -vv) &&
  branch=$(echo "$branches" | fzf +m) &&
  git branch -d $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

g_fuzzy_branch() {
  git branch -a --color=always | grep -v '/HEAD\s' | sort |
  fzf-down --ansi --multi --tac --preview-window right:70% \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##'
}

g_fuzzy_fixup() {
  hash=$(fuzzy_log)
  git commit --fixup=$(echo "$hash")
}

g_fuzzy_rebase() {
  hash=$(fuzzy_log)
  git rebase -i --autosquash $(echo "$hash")
}

g_fuzzy_log() {
  fuzzy_log | pbcopy # Copy to clipboard
}

fuzzy_log() {
  is_in_git_repo || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always | head -'$LINES |
  grep -o "[a-f0-9]\{7,\}" |
  tr -d '\012\015' # Strip newlines
}

g_fuzzy_reflog() {
  is_in_git_repo || return
  git ref |
  fzf-down --no-sort --reverse --multi |
  grep -o "[a-f0-9]\{7,\}" |
  tr -d '\012\015' | pbcopy
}

g_fuzzy_stash() {
  local out q k sha
  while out=$(
    git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
    fzf --ansi --no-sort --query="$q" --print-query \
        --expect=ctrl-d,ctrl-b);
  do
    IFS=$'\n'; set -f
    lines=($(<<< "$out"))
    unset IFS; set +f
    q="${lines[0]}"
    k="${lines[1]}"
    sha="${lines[-1]}"
    sha="${sha%% *}"
    [[ -z "$sha" ]] && continue
    if [[ "$k" == 'ctrl-d' ]]; then
      git diff $sha
    elif [[ "$k" == 'ctrl-b' ]]; then
      git stash branch "stash-$sha" $sha
      break;
    else
      git -c color.ui=always stash show -p $sha | less -+F
    fi
  done
}
