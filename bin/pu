#!/usr/bin/env bash

if [ $# -lt 1 ]; then
  echo "Missing argument: action (init, up)"
fi

# i.e. "pu up staging"
if [ "$1" = "init" ] || [ "$1" = "new" ]; then
  if [ ! -f ./Pulumi.yaml ]; then
    if [ -f "./package.json" ]; then
      project_name=$(node -p "require('./package.json').name")
    else
      project_name=$(basename "$PWD")
    fi
    echo "Create new Pulumi project '$project_name'? (y/n)"
    read -r input
    if [ "$input" = "y" ]; then
      echo "name: $project_name" >> Pulumi.yaml
      echo "runtime: nodejs" >> Pulumi.yaml
      echo "main: infra/index.ts" >> Pulumi.yaml

      mkdir infra
      touch infra/index.ts
      echo "import * as pulumi from \"@pulumi/pulumi\"" >> infra/index.ts

      echo "Created pulumi project '$project_name'!"
      echo "You can add a new environment with 'pu addstack (staging|prod)'"
    fi
  fi
elif [ "$1" = "addstack" ]; then
  if [ $# -lt 2 ]; then
    echo "Missing argument: env (staging, production)"
  else
    echo "Create new stack $2? (y/n)"
    read -r input
    if [ "$input" = "y" ]; then
      touch .env."$2"
      pulumi stack init "$2"
    fi
  fi
elif [ "$1" = "up" ]; then
  if [ $# -lt 2 ]; then
    echo "Missing argument: env (staging, production)"
  else
    pulumi stack select "$2"
    op run --env-file=.env."$2" -- pulumi preview
    echo "Deploy? (y/n)"
    read -r input
    if [ "$input" = "y" ]; then
      op run --env-file=.env."$2" -- pulumi up --skip-preview
    fi
  fi
elif [ "$1" = "destroy" ]; then
  if [ $# -lt 2 ]; then
    echo "Missing argument: env (staging, production)"
  else
    pulumi stack select "$2"

    if [ "$3" = "--confirm" ]; then
      echo "Destroy $2? (y/n)"
      read -r input
      if [ "$input" = "y" ]; then
        op run --env-file=.env."$2" -- pulumi destroy --yes
      fi
    else
      # Just get a preview
      timeout 5s pulumi destroy; stty sane; tput cnorm
      echo "If you're sure, run 'pu destroy $2 --confirm'"
    fi
  fi
elif [ "$1" = "show" ]; then
  if [ $# -lt 2 ]; then
    echo "Missing argument: key (i.e. deployerAccessKeySecret)"
  else
    pulumi stack output "$2" --show-secrets
  fi
elif [ "$1" = "export" ]; then
  pulumi stack export > export.json
elif [ "$1" = "import" ]; then
  pulumi stack import --file export.json
else
  pulumi "$@"
fi

